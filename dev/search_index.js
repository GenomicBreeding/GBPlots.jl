var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GBPlots","category":"page"},{"location":"#GBPlots","page":"Home","title":"GBPlots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GBPlots.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GBPlots]","category":"page"},{"location":"#GBPlots.plot-Union{Tuple{T}, Tuple{Type{T}, GBCore.Phenomes}} where T<:CorHeatPlots","page":"Home","title":"GBPlots.plot","text":"plot(\n    type::Type{T},\n    phenomes::Phenomes;\n    plot_size::Tuple{Int64, Int64} = (600, 450),\n    color_scheme::Symbol = :viridis,\n    rev_label_colors::Bool = false,\n)::T where {T<:CorHeatPlots}\n\nCorrelation heatmaps:\n\nbetween traits across populations\nbetween entries across populations\nbetween traits per populations\nbetween entries per populations\n\nExamples\n\njulia> genomes = GBCore.simulategenomes(n=300, verbose=false); genomes.populations = StatsBase.sample(string.(\"pop_\", 1:3), length(genomes.entries), replace=true);\n\njulia> trials, _ = GBCore.simulatetrials(genomes=genomes, n_years=1, n_seasons=1, n_harvests=1, n_sites=1, n_replications=1, verbose=false);\n\njulia> phenomes = extractphenomes(trials); phenomes.phenotypes[1,1] = missing;\n\njulia> hplots = plot(CorHeatPlots, phenomes);\n\njulia> fnames = saveplots(hplots, format=\"png\")\n\njulia> rm.(fnames);\n\n\n\n\n\n","category":"method"},{"location":"#GBPlots.plot-Union{Tuple{T}, Tuple{Type{T}, GBCore.Phenomes}} where T<:DistributionPlots","page":"Home","title":"GBPlots.plot","text":"plot(\n    type::Type{T},\n    phenomes::Phenomes;\n    plot_size::Tuple{Int64,Int64} = (600, 450),\n)::T where {T<:DistributionPlots}\n\nPlot distributions of each trait across populations\n\nExamples\n\njulia> genomes = GBCore.simulategenomes(n=300, verbose=false); genomes.populations = StatsBase.sample(string.(\"pop_\", 1:3), length(genomes.entries), replace=true);\n\njulia> trials, _ = GBCore.simulatetrials(genomes=genomes, n_years=1, n_seasons=1, n_harvests=1, n_sites=1, n_replications=1, verbose=false);\n\njulia> phenomes = extractphenomes(trials); phenomes.phenotypes[1,1] = missing;\n\njulia> dplots = plot(DistributionPlots, phenomes);\n\njulia> fnames = saveplots(dplots)\n\njulia> rm.(fnames);\n\n\n\n\n\n","category":"method"},{"location":"#GBPlots.plot-Union{Tuple{T}, Tuple{Type{T}, GBCore.Phenomes}} where T<:TreePlots","page":"Home","title":"GBPlots.plot","text":"plot(\n    type::Type{T},\n    phenomes::Phenomes;\n    plot_size::Tuple{Int64,Int64} = (600, 450),\n    horizontal::Bool = true,\n    standardise_traits::Bool = true,\n)::T where {T<:TreePlots}\n\nPlot tree diagrams showing the relationships of each entry using trait information.\n\nDistance metric: Euclidean\nGrouping/linkage: Ward's distance\nBranch order: Optimal (Bar-Joseph et al, 2001. Bionformatics.)\n\nExamples\n\njulia> genomes = GBCore.simulategenomes(n=300, verbose=false); genomes.populations = StatsBase.sample(string.(\"pop_\", 1:3), length(genomes.entries), replace=true);\n\njulia> trials, _ = GBCore.simulatetrials(genomes=genomes, n_years=1, n_seasons=1, n_harvests=1, n_sites=1, n_replications=1, verbose=false);\n\njulia> phenomes = extractphenomes(trials); phenomes.phenotypes[1,1] = missing;\n\njulia> tplots = plot(TreePlots, phenomes);\n\njulia> fnames = saveplots(tplots)\n\njulia> rm.(fnames);\n\n\n\n\n\n","category":"method"},{"location":"#GBPlots.plot-Union{Tuple{T}, Tuple{Type{T}, GBCore.Phenomes}} where T<:ViolinPlots","page":"Home","title":"GBPlots.plot","text":"plot(type::Type{T}, phenomes::Phenomes; plot_size::Tuple{Int64, Int64} = (600, 450))::T where {T<:ViolinPlots}\n\nViolin plots per trait per population\n\nExamples\n\njulia> genomes = GBCore.simulategenomes(n=300, verbose=false); genomes.populations = StatsBase.sample(string.(\"pop_\", 1:3), length(genomes.entries), replace=true);\n\njulia> trials, _ = GBCore.simulatetrials(genomes=genomes, n_years=1, n_seasons=1, n_harvests=1, n_sites=1, n_replications=1, verbose=false);\n\njulia> phenomes = extractphenomes(trials); phenomes.phenotypes[1,1] = missing;\n\njulia> vplots = plot(ViolinPlots, phenomes);\n\njulia> fnames = saveplots(vplots)\n\njulia> rm.(fnames);\n\n\n\n\n\n","category":"method"}]
}
